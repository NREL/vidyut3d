#include "Chemistry.H"
const int rmap[NUM_REACTIONS] = {
    13,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  186,
    187, 191, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
    268, 269, 270, 271, 272, 273, 274, 275, 276, 283, 284, 285, 286, 287, 288,
    289, 290, 291, 292, 0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,
    11,  12,  14,  15,  16,  17,  18,  19,  20,  21,  22,  36,  37,  38,  39,
    40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,
    55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
    70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
    85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99,
    100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
    115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
    130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
    145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
    160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
    175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 192,
    193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
    208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,
    223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237,
    238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
    253, 254, 277, 278, 279, 280, 281, 282};

// Returns 0-based map of reaction order
void GET_RMAP(int* _rmap)
{
    for (int j = 0; j < NUM_REACTIONS; ++j)
    {
        _rmap[j] = rmap[j];
    }
}

// Returns a count of gas species in a gas reaction, and their indices
// and stoichiometric coefficients. (Eq 50)
void CKINU(const int i, int& nspec, int ki[], int nu[])
{
    const int ns[NUM_GAS_REACTIONS] = {
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4,
        4, 3, 4, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 3, 4, 3, 3, 4, 3, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 2, 2, 2, 5, 5, 3, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 3, 3, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 4, 3, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4,
        4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 4, 3, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4};
    const int kiv[NUM_GAS_REACTIONS * 5] = {
        0,  7,  0,  7,  0,  0,  7,  0,  8,  0,  0,  7,  0,  9,  0,  0,  7,  0,
        10, 0,  0,  7,  0,  11, 0,  0,  7,  0,  12, 0,  0,  7,  0,  13, 0,  0,
        7,  0,  14, 0,  0,  7,  0,  15, 0,  0,  7,  0,  16, 0,  0,  7,  0,  17,
        0,  0,  7,  0,  18, 0,  0,  7,  0,  19, 0,  7,  0,  35, 0,  0,  0,  2,
        0,  2,  0,  0,  2,  0,  3,  0,  0,  2,  0,  4,  0,  0,  2,  0,  5,  0,
        0,  2,  0,  20, 0,  0,  2,  0,  21, 0,  0,  2,  0,  22, 0,  0,  2,  0,
        23, 0,  0,  2,  0,  24, 0,  2,  0,  32, 0,  0,  6,  0,  34, 0,  0,  1,
        0,  31, 0,  0,  27, 0,  38, 0,  0,  28, 0,  40, 0,  0,  29, 0,  41, 0,
        0,  7,  6,  0,  0,  0,  2,  1,  0,  0,  0,  27, 1,  6,  0,  0,  28, 2,
        6,  0,  0,  28, 1,  27, 0,  0,  29, 1,  28, 0,  0,  29, 2,  27, 0,  0,
        7,  8,  7,  0,  0,  7,  9,  7,  8,  0,  7,  10, 7,  9,  0,  7,  11, 7,
        10, 0,  7,  12, 7,  11, 0,  7,  13, 7,  12, 0,  7,  14, 7,  13, 0,  7,
        15, 7,  14, 0,  2,  8,  2,  7,  0,  2,  9,  2,  8,  0,  2,  10, 2,  9,
        0,  2,  11, 2,  10, 0,  2,  12, 2,  11, 0,  2,  13, 2,  12, 0,  2,  14,
        2,  13, 0,  2,  15, 2,  14, 0,  6,  8,  6,  7,  0,  6,  9,  6,  8,  0,
        6,  10, 6,  9,  0,  6,  11, 6,  10, 0,  6,  12, 6,  11, 0,  6,  13, 6,
        12, 0,  6,  14, 6,  13, 0,  6,  15, 6,  14, 0,  1,  8,  1,  7,  0,  1,
        9,  1,  8,  0,  1,  10, 1,  9,  0,  1,  11, 1,  10, 0,  1,  12, 1,  11,
        0,  1,  13, 1,  12, 0,  1,  14, 1,  13, 0,  1,  15, 1,  14, 0,  3,  7,
        2,  7,  0,  4,  7,  3,  7,  0,  5,  7,  4,  7,  0,  2,  3,  2,  0,  0,
        2,  4,  2,  3,  0,  2,  5,  2,  4,  0,  3,  6,  2,  6,  0,  4,  6,  3,
        6,  0,  5,  6,  4,  6,  0,  1,  3,  1,  2,  0,  1,  4,  1,  3,  0,  1,
        5,  1,  4,  0,  8,  7,  9,  0,  0,  8,  9,  7,  10, 0,  8,  10, 7,  11,
        0,  8,  11, 7,  12, 0,  8,  12, 7,  13, 0,  8,  13, 7,  14, 0,  8,  14,
        7,  15, 0,  9,  8,  10, 0,  0,  9,  10, 8,  11, 0,  9,  11, 8,  12, 0,
        9,  12, 8,  13, 0,  9,  13, 8,  14, 0,  9,  14, 8,  15, 0,  10, 9,  11,
        0,  0,  10, 11, 9,  12, 0,  10, 12, 9,  13, 0,  10, 13, 9,  14, 0,  10,
        14, 9,  15, 0,  11, 10, 12, 0,  0,  11, 12, 10, 13, 0,  11, 13, 10, 14,
        0,  11, 14, 10, 15, 0,  12, 11, 13, 0,  0,  12, 13, 11, 14, 0,  12, 14,
        11, 15, 0,  13, 12, 14, 0,  0,  13, 14, 12, 15, 0,  14, 13, 15, 0,  0,
        3,  2,  4,  0,  0,  3,  4,  2,  5,  0,  4,  3,  5,  0,  0,  3,  7,  2,
        8,  0,  3,  8,  2,  9,  0,  3,  9,  2,  10, 0,  3,  10, 2,  11, 0,  3,
        11, 2,  12, 0,  3,  12, 2,  13, 0,  3,  13, 2,  14, 0,  3,  14, 2,  15,
        0,  4,  7,  3,  8,  0,  4,  8,  3,  9,  0,  4,  9,  3,  10, 0,  4,  10,
        3,  11, 0,  4,  11, 3,  12, 0,  4,  12, 3,  13, 0,  4,  13, 3,  14, 0,
        4,  14, 3,  15, 0,  5,  7,  4,  8,  0,  5,  8,  4,  9,  0,  5,  9,  4,
        10, 0,  5,  10, 4,  11, 0,  5,  11, 4,  12, 0,  5,  12, 4,  13, 0,  5,
        13, 4,  14, 0,  5,  14, 4,  15, 0,  2,  9,  3,  7,  0,  2,  10, 3,  8,
        0,  2,  11, 3,  9,  0,  2,  12, 3,  10, 0,  2,  13, 3,  11, 0,  2,  14,
        3,  12, 0,  2,  15, 3,  13, 0,  3,  9,  4,  7,  0,  3,  10, 4,  8,  0,
        3,  11, 4,  9,  0,  3,  12, 4,  10, 0,  3,  13, 4,  11, 0,  3,  14, 4,
        12, 0,  3,  15, 4,  13, 0,  4,  9,  5,  7,  0,  4,  10, 5,  8,  0,  4,
        11, 5,  9,  0,  4,  12, 5,  10, 0,  4,  13, 5,  11, 0,  4,  14, 5,  12,
        0,  4,  15, 5,  13, 0,  16, 13, 7,  17, 0,  16, 14, 17, 8,  0,  16, 15,
        17, 9,  0,  7,  17, 16, 13, 0,  17, 8,  16, 14, 0,  17, 9,  16, 15, 0,
        17, 16, 0,  0,  0,  18, 7,  0,  0,  0,  19, 17, 0,  0,  0,  0,  7,  0,
        6,  34, 0,  2,  0,  1,  31, 0,  35, 6,  0,  0,  0,  35, 6,  25, 0,  0,
        35, 6,  26, 0,  0,  36, 6,  7,  0,  0,  37, 7,  0,  0,  0,  32, 1,  0,
        0,  0,  33, 1,  0,  0,  0,  33, 1,  2,  0,  0,  38, 1,  6,  0,  0,  40,
        1,  27, 0,  0,  40, 1,  6,  0,  0,  41, 1,  27, 0,  0,  41, 1,  28, 0,
        0,  42, 1,  29, 0,  0,  42, 1,  28, 0,  0,  39, 1,  7,  0,  2,  35, 1,
        39, 0,  35, 16, 6,  36, 0,  6,  35, 34, 7,  0,  6,  35, 36, 0,  0,  7,
        35, 37, 0,  0,  35, 29, 7,  41, 0,  6,  36, 7,  35, 0,  6,  37, 34, 7,
        0,  37, 7,  35, 0,  0,  2,  34, 1,  38, 0,  34, 29, 27, 40, 0,  34, 29,
        6,  41, 0,  34, 29, 2,  39, 0,  1,  32, 31, 2,  0,  2,  32, 1,  33, 0,
        32, 29, 2,  41, 0,  32, 7,  1,  39, 0,  31, 29, 1,  41, 0,  2,  38, 33,
        6,  0,  2,  38, 1,  40, 0,  38, 29, 27, 41, 0,  38, 29, 6,  42, 0,  7,
        38, 6,  39, 0,  2,  40, 1,  41, 0,  40, 29, 28, 41, 0,  40, 29, 27, 42,
        0,  29, 41, 28, 42, 0,  39, 29, 7,  42, 0,  6,  16, 6,  7,  0,  6,  16,
        7,  26, 0,  7,  16, 7,  0,  0,  16, 7,  17, 0,  0,  16, 7,  19, 0,  0,
        16, 6,  7,  0,  0,  7,  17, 7,  16, 0,  7,  17, 7,  0,  0,  7,  18, 7,
        17, 0,  18, 0,  7,  35, 0,  18, 0,  37, 0,  0,  16, 18, 0,  37, 0,  7,
        25, 6,  7,  0,  6,  26, 6,  0,  0,  6,  26, 6,  25, 0,  7,  26, 6,  7,
        0,  1,  16, 1,  7,  0,  2,  16, 1,  7,  0,  16, 29, 7,  29, 0,  2,  17,
        2,  16, 0,  1,  18, 1,  7,  0,  2,  18, 1,  7,  0,  3,  6,  1,  27, 0,
        4,  6,  1,  27, 0,  5,  6,  1,  27, 0,  20, 6,  1,  27, 0,  21, 6,  1,
        27, 0,  22, 6,  1,  27, 0,  23, 6,  1,  27, 0,  24, 6,  1,  27, 0,  2,
        25, 1,  27, 0,  25, 29, 27, 28, 0,  2,  26, 1,  27, 0,  6,  27, 1,  7,
        0,  1,  27, 2,  6,  0,  27, 2,  7,  0,  0,  27, 6,  28, 0,  0,  27, 1,
        7,  0,  0,  1,  28, 2,  27, 0,  6,  28, 1,  7,  0,  6,  28, 2,  7,  0,
        27, 28, 6,  29, 0,  2,  28, 1,  29, 0,  1,  29, 2,  28, 0,  6,  16, 0,
        0,  0,  6,  16, 0,  0,  0,  6,  16, 0,  0,  0,  6,  16, 0,  0,  0,  6,
        17, 0,  0,  0,  6,  17, 0,  0,  0,  6,  17, 0,  0,  0,  6,  17, 0,  0,
        0,  6,  7,  0,  0,  0,  6,  7,  0,  0,  0,  1,  2,  0,  0,  0,  1,  2,
        0,  0,  0,  1,  6,  27, 0,  0,  1,  6,  27, 0,  0,  2,  6,  28, 0,  0,
        2,  6,  28, 0,  0,  1,  27, 28, 0,  0,  1,  27, 28, 0,  0,  1,  28, 29,
        0,  0,  1,  28, 29, 0,  0,  2,  27, 29, 0,  0,  2,  27, 29, 0,  0,  0,
        2,  1,  30, 0,  30, 32, 1,  0,  0,  30, 33, 1,  2,  0,  30, 35, 1,  7,
        0,  30, 37, 1,  7,  0,  30, 39, 2,  7,  0,  30, 32, 1,  2,  0,  30, 32,
        1,  2,  0,  30, 33, 2,  0,  0,  30, 33, 2,  0,  0,  30, 35, 1,  7,  0,
        30, 35, 1,  7,  0,  30, 37, 1,  7,  0,  30, 37, 1,  7,  0,  30, 39, 2,
        7,  0,  30, 39, 2,  7,  0};
    const int nuv[NUM_GAS_REACTIONS * 5] = {
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0,
        -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0,
        -1, 1,  1, 0, 0, -1, 2,  0, 0, 0, -1, 2,  0, 0, 0, -1, 1,  1, 0, 0,
        -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0,
        -1, -1, 2, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 2, 0, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -2, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -2, 1,  1, 0, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -2, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -2, 1,  1, 0, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -2, 1,  1, 0, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -2, 1,  1, 0, 0, -1, -1, 1, 1, 0, -2, 1,  1, 0, 0,
        -2, 1,  1, 0, 0, -1, -1, 1, 1, 0, -2, 1,  1, 0, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  0, 0, 0, -1, 1,  0, 0, 0,
        -1, 1,  0, 0, 0, -1, -1, 2, 1, 1, -1, -1, 2, 1, 1, -1, -1, 2, 0, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 2, 0, 0,
        -1, -1, 2, 0, 0, -1, -1, 3, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 2, 1, 0, -1, -1, 2, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 2, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 0, 0, -1, -1, 1, 0, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 2, 0, -1, 1,  1, 0, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 2, 0, 0, -2, 1,  1, 0, 0, -2, 1,  1, 0, 0,
        -2, 2,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 2, 0, 0, -1, -1, 1, 1, 0,
        -2, 1,  1, 1, 0, -2, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 2, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 2, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 2, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -2, 1,  1, 0, 0, -2, 1,  1, 0, 0,
        -2, 2,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 2, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -2, 1,  0, 0, 0,
        -2, 1,  0, 0, 0, -2, 1,  0, 0, 0, -2, 1,  0, 0, 0, -2, 1,  0, 0, 0,
        -2, 1,  0, 0, 0, -2, 1,  0, 0, 0, -2, 1,  0, 0, 0, -2, 1,  0, 0, 0,
        -2, 1,  0, 0, 0, -2, 1,  0, 0, 0, -2, 1,  0, 0, 0, -1, -1, 1, 0, 0,
        -1, -1, 1, 0, 0, -1, -1, 1, 0, 0, -1, -1, 1, 0, 0, -1, -1, 1, 0, 0,
        -1, -1, 1, 0, 0, -1, -1, 1, 0, 0, -1, -1, 1, 0, 0, -1, -1, 1, 0, 0,
        -1, -1, 1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 3, 0, 0, -1, -1, 2, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 2, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 2, 0, 0, -1, -1, 2, 0, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0, -1, -1, 1, 2, 0, -1, -1, 1, 2, 0, -1, -1, 1, 1, 0,
        -1, -1, 1, 1, 0};
    if (i < 1)
    {
        // Return max num species per reaction
        nspec = 5;
    } else
    {
        if (i > NUM_GAS_REACTIONS)
        {
            nspec = -1;
        } else
        {
            nspec = ns[i - 1];
            for (int j = 0; j < nspec; ++j)
            {
                ki[j] = kiv[(i - 1) * 5 + j] + 1;
                nu[j] = nuv[(i - 1) * 5 + j];
            }
        }
    }
}

// save atomic weights into array
void atomicWeight(amrex::Real* awt)
{
    awt[0] = 0.000549;  // E
    awt[1] = 14.007000; // N
    awt[2] = 1.008000;  // H
}

// get atomic weight for all elements
void CKAWT(amrex::Real* awt) { atomicWeight(awt); }

// Returns the elemental composition
// of the speciesi (mdim is num of elements)
void CKNCF(int* ncf)
{
    int kd = 3;
    // Zero ncf
    for (int id = 0; id < kd * 43; ++id)
    {
        ncf[id] = 0;
    }

    // E
    ncf[0 * kd + 0] = 1; // E

    // H
    ncf[1 * kd + 2] = 1; // H

    // H2
    ncf[2 * kd + 2] = 2; // H

    // H2v1
    ncf[3 * kd + 2] = 2; // H

    // H2v2
    ncf[4 * kd + 2] = 2; // H

    // H2v3
    ncf[5 * kd + 2] = 2; // H

    // N
    ncf[6 * kd + 1] = 1; // N

    // N2
    ncf[7 * kd + 1] = 2; // N

    // N2v1
    ncf[8 * kd + 1] = 2; // N

    // N2v2
    ncf[9 * kd + 1] = 2; // N

    // N2v3
    ncf[10 * kd + 1] = 2; // N

    // N2v4
    ncf[11 * kd + 1] = 2; // N

    // N2v5
    ncf[12 * kd + 1] = 2; // N

    // N2v6
    ncf[13 * kd + 1] = 2; // N

    // N2v7
    ncf[14 * kd + 1] = 2; // N

    // N2v8
    ncf[15 * kd + 1] = 2; // N

    // N2A3
    ncf[16 * kd + 1] = 2; // N

    // N2B3
    ncf[17 * kd + 1] = 2; // N

    // N2a1
    ncf[18 * kd + 1] = 2; // N

    // N2C3
    ncf[19 * kd + 1] = 2; // N

    // H2B3
    ncf[20 * kd + 2] = 2; // H

    // H2B1
    ncf[21 * kd + 2] = 2; // H

    // H2C3
    ncf[22 * kd + 2] = 2; // H

    // H2A3
    ncf[23 * kd + 2] = 2; // H

    // H2R
    ncf[24 * kd + 2] = 2; // H

    // N2D
    ncf[25 * kd + 1] = 1; // N

    // N2P
    ncf[26 * kd + 1] = 1; // N

    // NH
    ncf[27 * kd + 2] = 1; // H
    ncf[27 * kd + 1] = 1; // N

    // NH2
    ncf[28 * kd + 2] = 2; // H
    ncf[28 * kd + 1] = 1; // N

    // NH3
    ncf[29 * kd + 2] = 3; // H
    ncf[29 * kd + 1] = 1; // N

    // H-
    ncf[30 * kd + 0] = 1; // E
    ncf[30 * kd + 2] = 1; // H

    // H+
    ncf[31 * kd + 0] = -1; // E
    ncf[31 * kd + 2] = 1;  // H

    // H2+
    ncf[32 * kd + 0] = -1; // E
    ncf[32 * kd + 2] = 2;  // H

    // H3+
    ncf[33 * kd + 0] = -1; // E
    ncf[33 * kd + 2] = 3;  // H

    // N+
    ncf[34 * kd + 0] = -1; // E
    ncf[34 * kd + 1] = 1;  // N

    // N2+
    ncf[35 * kd + 0] = -1; // E
    ncf[35 * kd + 1] = 2;  // N

    // N3+
    ncf[36 * kd + 0] = -1; // E
    ncf[36 * kd + 1] = 3;  // N

    // N4+
    ncf[37 * kd + 0] = -1; // E
    ncf[37 * kd + 1] = 4;  // N

    // NH+
    ncf[38 * kd + 0] = -1; // E
    ncf[38 * kd + 2] = 1;  // H
    ncf[38 * kd + 1] = 1;  // N

    // N2H+
    ncf[39 * kd + 0] = -1; // E
    ncf[39 * kd + 2] = 1;  // H
    ncf[39 * kd + 1] = 2;  // N

    // NH2+
    ncf[40 * kd + 0] = -1; // E
    ncf[40 * kd + 2] = 2;  // H
    ncf[40 * kd + 1] = 1;  // N

    // NH3+
    ncf[41 * kd + 0] = -1; // E
    ncf[41 * kd + 2] = 3;  // H
    ncf[41 * kd + 1] = 1;  // N

    // NH4+
    ncf[42 * kd + 0] = -1; // E
    ncf[42 * kd + 2] = 4;  // H
    ncf[42 * kd + 1] = 1;  // N
}

// Returns the vector of strings of element names
void CKSYME_STR(amrex::Vector<std::string>& ename)
{
    ename.resize(3);
    ename[0] = "E";
    ename[1] = "N";
    ename[2] = "H";
}

// Returns the vector of strings of species names
void CKSYMS_STR(amrex::Vector<std::string>& kname)
{
    kname.resize(43);
    kname[0] = "E";
    kname[1] = "H";
    kname[2] = "H2";
    kname[3] = "H2v1";
    kname[4] = "H2v2";
    kname[5] = "H2v3";
    kname[6] = "N";
    kname[7] = "N2";
    kname[8] = "N2v1";
    kname[9] = "N2v2";
    kname[10] = "N2v3";
    kname[11] = "N2v4";
    kname[12] = "N2v5";
    kname[13] = "N2v6";
    kname[14] = "N2v7";
    kname[15] = "N2v8";
    kname[16] = "N2A3";
    kname[17] = "N2B3";
    kname[18] = "N2a1";
    kname[19] = "N2C3";
    kname[20] = "H2B3";
    kname[21] = "H2B1";
    kname[22] = "H2C3";
    kname[23] = "H2A3";
    kname[24] = "H2R";
    kname[25] = "N2D";
    kname[26] = "N2P";
    kname[27] = "NH";
    kname[28] = "NH2";
    kname[29] = "NH3";
    kname[30] = "H-";
    kname[31] = "H+";
    kname[32] = "H2+";
    kname[33] = "H3+";
    kname[34] = "N+";
    kname[35] = "N2+";
    kname[36] = "N3+";
    kname[37] = "N4+";
    kname[38] = "NH+";
    kname[39] = "N2H+";
    kname[40] = "NH2+";
    kname[41] = "NH3+";
    kname[42] = "NH4+";
}
